class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] vis=new boolean[adj.size()];
        Arrays.fill(vis,false);
        ArrayList<Integer> res=new ArrayList<>();
        dfsHelper(adj,vis,res,0);
        return res;
    }
    public void dfsHelper(ArrayList<ArrayList<Integer>> adj,boolean[] vis,ArrayList<Integer> res, int src ){
        if(vis[src]==false){
            vis[src]=true;
            res.add(src);
            for(int i:adj.get(src)){
                dfsHelper(adj,vis,res,i);
            }
        }
    }
}

Examples:

Input: adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]

Output: [0, 2, 4, 3, 1]
