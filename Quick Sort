class Solution {
    // Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high) {
        // code here
        if(low<high){
            int pivot=partition(arr,low,high);
            quickSort(arr,low,pivot-1);
            quickSort(arr,pivot+1,high);
        }
    }

    static int partition(int arr[], int low, int high) {
        
        // your code here
        int pivot=high;
        int j=low-1;
        int i=low;
        while(i<pivot){
            if(arr[i]<arr[pivot]){
                int temp=arr[i];
                arr[i]=arr[j+1];
                arr[j+1]=temp;
                j++;
            }
            i++;
        }
        j++;
        int temp=arr[pivot];
        arr[pivot]=arr[j];
        arr[j]=temp;
        return j;
    }
    
}



Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: After sorting, all elements are arranged in ascending order.
Input: arr[] = [2, 1, 6, 10, 4, 1, 3, 9, 7]
Output: [1, 1, 2, 3, 4, 6, 7, 9, 10]
Explanation: Duplicate elements (1) are retained in sorted order.
Input: arr[] = [5, 5, 5, 5]
Output: [5, 5, 5, 5]
